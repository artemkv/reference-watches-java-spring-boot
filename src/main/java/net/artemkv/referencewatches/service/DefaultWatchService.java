package net.artemkv.referencewatches.service;

import net.artemkv.referencewatches.persistence.model.Gender;
import net.artemkv.referencewatches.persistence.model.Watch;
import net.artemkv.referencewatches.persistence.repository.WatchRepository;
import net.artemkv.referencewatches.specifications.ComparableSpecification;
import net.artemkv.referencewatches.specifications.WatchWithBrandWithTitle;
import net.artemkv.referencewatches.specifications.WatchWithGender;
import net.artemkv.referencewatches.specifications.WatchWithTitle;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.Optional;

@Service
public class DefaultWatchService implements WatchService {
    private final WatchRepository watchRepository;
    private final EntityManager entityManager;

    public DefaultWatchService(WatchRepository watchRepository, EntityManager entityManager) {
        this.watchRepository = watchRepository;
        this.entityManager = entityManager;
    }

    @Override
    public Page<Watch> getWatches(
        String title, Gender gender, String brandTitle, Pageable pageable) {
        ComparableSpecification<Watch> spec = new ComparableSpecification<Watch>()
            .where(new WatchWithTitle(title))
            .and(new WatchWithGender(gender))
            .and(new WatchWithBrandWithTitle(brandTitle));
        return watchRepository.findAll(spec, pageable);
    }

    @Override
    public Watch getWatch(long id) {
        return watchRepository.findById(id).orElse(null);
    }

    @Override
    @Transactional
    public Watch createWatch(Watch watch) {
        if (watch.getId() != 0) {
            throw new IllegalStateException("Id is generated by the database, should be empty.");
        }
        Watch watchCreated = watchRepository.save(watch);
        entityManager.refresh(watchCreated);
        return watchCreated;
    }

    @Override
    @Transactional
    public boolean updateWatch(Watch watch) {
        if (watch.getId() == 0) {
            throw new IllegalStateException("Id of existing entity should be provided.");
        }
        Optional<Watch> watchInDb = watchRepository.findById(watch.getId());
        if (!watchInDb.isPresent()) {
            return false;
        }
        watchRepository.save(watch);
        return true;
    }

    @Override
    @Transactional
    public boolean deleteWatch(long id) {
        Optional<Watch> watchInDb = watchRepository.findById(id);
        if (!watchInDb.isPresent()) {
            return false;
        }
        watchRepository.deleteById(id);
        return true;
    }
}
