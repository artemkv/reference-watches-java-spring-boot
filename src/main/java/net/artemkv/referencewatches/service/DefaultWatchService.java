package net.artemkv.referencewatches.service;

import net.artemkv.referencewatches.persistence.model.Watch;
import net.artemkv.referencewatches.persistence.repository.WatchRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Service
public class DefaultWatchService implements WatchService {
    private WatchRepository watchRepository;

    public DefaultWatchService(WatchRepository watchRepository) {
        this.watchRepository = watchRepository;
    }

    @Override
    public Page<Watch> getWatches(Pageable pageable) {
        return watchRepository.findAll(pageable);
    }

    @Override
    public Watch getWatch(long id) {
        return watchRepository.findById(id).orElse(null);
    }

    @Override
    public Watch createWatch(Watch watch) {
        if (watch.getId() != 0) {
            throw new IllegalStateException("Id is generated by the database, should be empty.");
        }
        return watchRepository.save(watch);
    }

    @Override
    @Transactional
    public boolean updateWatch(Watch watch) {
        if (watch.getId() == 0) {
            throw new IllegalStateException("Id of existing entity should be provided.");
        }
        Optional<Watch> watchInDb = watchRepository.findById(watch.getId());
        if (!watchInDb.isPresent()) {
            return false;
        }
        // TODO: Overwrites date created
        watchRepository.save(watch);
        return true;
    }

    @Override
    @Transactional
    public boolean deleteWatch(long id) {
        Optional<Watch> watchInDb = watchRepository.findById(id);
        if (!watchInDb.isPresent()) {
            return false;
        }
        watchRepository.deleteById(id);
        return true;
    }
}
